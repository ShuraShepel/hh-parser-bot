import os
import logging
from dotenv import load_dotenv
from parser import parse_hh_vacancy
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–∞—Ä—Å—é –æ–ø–∏—Å–∞–Ω–∏–µ‚Ä¶")

    try:
        parsed_result = parse_hh_vacancy(message_text)

        if isinstance(parsed_result, tuple):
            vacancy_text = "\n".join(parsed_result)
        else:
            vacancy_text = parsed_result

        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ‚Ä¶")

        # Prompt
        system_prompt = (
            '–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º. –í—Å–µ–≥–¥–∞ –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n'
            '1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –æ—á–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è \\"[–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏]\\"."\n'
            '2. –ë–ª–æ–∫ —Å –Ω–∞–≤—ã–∫–∞–º–∏: "–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:" ‚Äî –¥–∞–ª–µ–µ —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–µ—Ñ–∏—Å–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è `;`, –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî —Ç–æ—á–∫–æ–π.\n'
            '3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: "–ù–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä"\n\n'
            '–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∏, ‚Äú—É–≤–∞–∂–∞–µ–º—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å‚Äù –∏ –ø—Ä–æ—á–∏–µ –∫–ª–∏—à–µ. –¢–æ–ª—å–∫–æ –ø–æ —à–∞–±–ª–æ–Ω—É.'
        )

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": vacancy_text}
            ]
        )

        reply_text = response.choices[0].message.content.strip()
        await update.message.reply_text(reply_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()