from dotenv import load_dotenv
from pathlib import Path
import os
from openai import OpenAI
from parser import parse_hh_vacancy
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text.startswith("https://hh.ru/vacancy/"):
        await context.bot.send_message(chat_id=chat_id, text="–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–∞—Ä—Å—é –æ–ø–∏—Å–∞–Ω–∏–µ‚Ä¶")

        try:
            description = parse_hh_vacancy(text)
            if not description or "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏" in description:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üòû")
                return

            await context.bot.send_message(chat_id=chat_id, text="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ‚Ä¶")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
            title_line = next((line for line in description.splitlines() if line.strip()), "")
            vacancy_title = title_line.strip()[:80]

            prompt = (
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∏–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å—Ç–∏–ª–µ:\n"
                "- –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ;\n"
                "- –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä. –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è \"{vacancy_title}\".\n"
                "- —Å—Ç—Ä–æ–∫–∞: –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                "- —Å–ø–∏—Å–æ–∫ –∏–∑ 7‚Äì10 –ø—É–Ω–∫—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º –∏ –Ω–∞–≤—ã–∫–∞–º–∏;\n"
                "- —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–±–∑–∞—Ü: –ù–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                "- –ø–æ–¥–ø–∏—Å—å: –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä.\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n{description}"
            )

            completion = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )

            letter = completion.choices[0].message.content.strip()

            # –ñ—ë—Å—Ç–∫–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ü–æ–≤–∫–∏
            letter = letter.rsplit("–° —É–≤–∞–∂–µ–Ω–∏–µ–º", 1)[0].strip()
            letter += "\n\n–ù–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä"

            if len(letter) > 4000:
                letter = letter[:3990] + "\n\n(–æ–±—Ä–µ–∑–∞–Ω–æ)"

            await context.bot.send_message(chat_id=chat_id, text=letter)

        except Exception as e:
            await context.bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞: {e}")
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru")


if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()